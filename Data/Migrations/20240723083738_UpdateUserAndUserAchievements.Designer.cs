// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(LiagDbContext))]
    [Migration("20240723083738_UpdateUserAndUserAchievements")]
    partial class UpdateUserAndUserAchievements
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("XpReward")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4c06454-b242-4462-afb1-46e7434007ce"),
                            ImageUrl = "https://ibb.co/zmnKFD4",
                            Requirements = "Complete 'How To Play'.",
                            Title = "Neon Novice",
                            XpReward = 10
                        },
                        new
                        {
                            Id = new Guid("171a541d-38a3-4416-a69e-4a17baa8adc3"),
                            ImageUrl = "https://ibb.co/5nLkGL3",
                            Requirements = "Add your first mission.",
                            Title = "Mission Maverick",
                            XpReward = 10
                        },
                        new
                        {
                            Id = new Guid("3f78ee6b-53c0-477a-ad02-cce0ef63dce6"),
                            ImageUrl = "https://ibb.co/vHRxKWn",
                            Requirements = "Complete your first mission.",
                            Title = "Codebreaker Initiate",
                            XpReward = 25
                        },
                        new
                        {
                            Id = new Guid("28babd3d-65bc-4fa5-891b-bf97c6391d09"),
                            ImageUrl = "https://ibb.co/z8NJnzy",
                            Requirements = "Complete every field in profile dashboard.",
                            Title = "Profile Overdrive",
                            XpReward = 10
                        },
                        new
                        {
                            Id = new Guid("1fba5715-69db-4cec-991e-96d735099a10"),
                            ImageUrl = "https://ibb.co/XzjWXMw",
                            Requirements = "Complete mission on 'Daily' difficulty.",
                            Title = "Daily Data Dynamo",
                            XpReward = 25
                        },
                        new
                        {
                            Id = new Guid("03deb41d-50d7-4f0f-941d-c02a4f64ae03"),
                            ImageUrl = "https://ibb.co/2hj4PXS",
                            Requirements = "Complete mission on 'Drop of Sweat' difficulty.",
                            Title = "Sweat-Proof Runner",
                            XpReward = 50
                        },
                        new
                        {
                            Id = new Guid("11e3cd46-f722-4925-a749-7534a4f2b906"),
                            ImageUrl = "https://ibb.co/4NXkrCj",
                            Requirements = "Complete mission on 'Challenging' difficulty.",
                            Title = "Chaos Conqueror",
                            XpReward = 75
                        },
                        new
                        {
                            Id = new Guid("f1bbad9d-d4db-4838-bf78-e483f3a7b8c8"),
                            ImageUrl = "https://ibb.co/0qDhmWQ",
                            Requirements = "Complete mission on 'Life-Hacker' difficulty.",
                            Title = "Life-Hacker Elite",
                            XpReward = 100
                        },
                        new
                        {
                            Id = new Guid("576a47b5-ba39-4726-9882-c0f40a0b75cb"),
                            ImageUrl = "https://ibb.co/KmHMCW4",
                            Requirements = "Complete mission on 'Anti-Procrastinator' difficulty.",
                            Title = "Procrastination Purged",
                            XpReward = 250
                        },
                        new
                        {
                            Id = new Guid("b1b99495-4dd0-414f-9071-70bf5d35bbad"),
                            ImageUrl = "https://ibb.co/Yj4tPhs",
                            Requirements = "Complete mission on every difficulty level.",
                            Title = "Difficulty Dominator",
                            XpReward = 200
                        },
                        new
                        {
                            Id = new Guid("3bbb87e1-6df8-4a5d-a26e-c4717f13572b"),
                            ImageUrl = "https://ibb.co/F07jvbr",
                            Requirements = "Give up a mission with at least one subtask completed.",
                            Title = "Strategic Surrender",
                            XpReward = 25
                        },
                        new
                        {
                            Id = new Guid("a15cde08-b1b2-4594-b7e2-aae1148c2ec7"),
                            ImageUrl = "https://ibb.co/LCyGq50",
                            Requirements = "Complete 5 missions.",
                            Title = "Mission Maestro",
                            XpReward = 50
                        },
                        new
                        {
                            Id = new Guid("38df1376-cca4-4ca7-96ca-593849df3fcc"),
                            ImageUrl = "https://ibb.co/jw0FHYB",
                            Requirements = "Complete 10 missions.",
                            Title = "Deca-Task Dynamo",
                            XpReward = 100
                        },
                        new
                        {
                            Id = new Guid("fbf0d5f7-a903-45f8-aea8-4b9acd1e68a3"),
                            ImageUrl = "https://ibb.co/9ZpHpn2",
                            Requirements = "Complete 25 missions.",
                            Title = "Quarter Century Quasar",
                            XpReward = 250
                        },
                        new
                        {
                            Id = new Guid("d4f66a08-6642-4304-a679-fb7f77aadbe0"),
                            ImageUrl = "https://ibb.co/S0q7ffZ",
                            Requirements = "Complete 50 missions.",
                            Title = "Half Century Hero",
                            XpReward = 500
                        },
                        new
                        {
                            Id = new Guid("ba0bf1aa-d50b-49e2-857c-ec5993a27d07"),
                            ImageUrl = "https://ibb.co/dPFMmmC",
                            Requirements = "Reach level 5.",
                            Title = "Level 5 Luminary",
                            XpReward = 50
                        },
                        new
                        {
                            Id = new Guid("246fd828-e4f7-4a64-9fd0-ce9eb4268e62"),
                            ImageUrl = "https://ibb.co/0BMKrsB",
                            Requirements = "Reach level 10.",
                            Title = "Deca-Level Dynamo",
                            XpReward = 100
                        },
                        new
                        {
                            Id = new Guid("623fd6b7-3759-4281-91b8-be0c9bacdf78"),
                            ImageUrl = "https://ibb.co/9v8QNFR",
                            Requirements = "Reach level 25.",
                            Title = "Quarter Century Cipher",
                            XpReward = 250
                        },
                        new
                        {
                            Id = new Guid("283b9c13-6949-4faa-92ee-ab0f34687bb7"),
                            ImageUrl = "https://ibb.co/MfYTBR0",
                            Requirements = "Reach level 50.",
                            Title = "Half Century Hacker",
                            XpReward = 500
                        },
                        new
                        {
                            Id = new Guid("36a32379-7062-4c7d-943e-44d2c7e57ebe"),
                            ImageUrl = "https://ibb.co/5YL1vqR",
                            Requirements = "Unlock every achievement.",
                            Title = "Achievement Unleashed",
                            XpReward = 2500
                        });
                });

            modelBuilder.Entity("Data.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("Data.Models.Mission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("XpReward")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("Data.Models.Subtask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MissionId");

                    b.ToTable("Subtasks");
                });

            modelBuilder.Entity("Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentGoal")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FacebookId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("GithubId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasCompletedTutorial")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalMissionsAdded")
                        .HasColumnType("int");

                    b.Property<int>("TotalMissionsCompleted")
                        .HasColumnType("int");

                    b.Property<int>("TotalXpGained")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Data.Models.UserAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UnlockedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Models.Subtask", b =>
                {
                    b.HasOne("Data.Models.Mission", null)
                        .WithMany("Subtasks")
                        .HasForeignKey("MissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Mission", b =>
                {
                    b.Navigation("Subtasks");
                });
#pragma warning restore 612, 618
        }
    }
}
